variables:
   VERSION: 1.0.${CI_PIPELINE_ID}

include:
  - template: Container-Scanning.gitlab-ci.yml
  - project: templates/ci
    file: DockerInDockerTemplate.yml

stages:
   - build
   - test
   - release
   - deploy

build-report-container:
  only:
    changes:
    - backend-report/**/*
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend-report
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-report:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-report:$CI_COMMIT_SHA

container_scanning:
  variables:
    CS_IMAGE: $CI_REGISTRY_IMAGE/sausage-report:$CI_COMMIT_SHA
  needs:
    - build-report-container

upload-report-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-report:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-report:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-report:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-report:latest
  needs:
    - job: container_scanning

deploy-report:
  stage: deploy
  image: vault:1.11.3
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "MONGO_DATABASE=${MONGO_DATABASE}"; 
       export "MONGO_USER=$(vault kv get -field=spring.data.mongodb.username secret/sausage-store)"; 
       export "MONGO_PASSWORD=$(vault kv get -field=spring.data.mongodb.password secret/sausage-store)"; 
       export "MONGO_HOST=${MONGO_HOST}"; 
      /bin/bash -s " < ./backend-report/backend-report_deploy.sh 
  needs:
    - job: upload-report-latest