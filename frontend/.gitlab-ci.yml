#test
stages:
  - build
  - test
  - release
  - deploy
  - notify
include:
  - template: Container-Scanning.gitlab-ci.yml
  - project: templates/ci
    file: DockerInDockerTemplate.yml
variables:
    VERSION: 1.0.${CI_PIPELINE_ID}
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
      
build-frontend-container:
  only:
    changes:
    - frontend/**/*
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    
container_scanning:
  variables:
    CS_IMAGE: $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
  needs:
    - build-frontend-container

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest
  needs:
    - job: container_scanning
    
deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
    - scp ./app/nginx.tmpl ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/nginx.tmpl
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      /bin/bash -s " < ./frontend/frontend_deploy.sh 
  needs:
    - job: upload-frontend-latest

cache:
  key: frontend
  paths:
    - frontend/dist/frontend # для хранения фронта 