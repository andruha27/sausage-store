#test
stages:
  - build
  - test
  - release
  - deploy
  - notify
include:
  - template: Container-Scanning.gitlab-ci.yml
  - project: templates/ci
    file: DockerInDockerTemplate.yml
variables:
    VERSION: 1.0.${CI_PIPELINE_ID}
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
      
build-frontend-container:
  only:
    changes:
    - frontend/**/*
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    
container_scanning:
  variables:
    CS_IMAGE: $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
  needs:
    - build-frontend-container

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest
  needs:
    - job: build-frontend-container
    
deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      /bin/bash -s " < ./frontend/frontend_deploy.sh 
  environment:
    name: production
  needs:
    - job: upload-frontend-latest

slack-notification-frontend:
  stage: notify
  variables: 
    DEPLOY_CURL_COMMAND_BODY: '{\"text\":\"Вышла новая версия frontend сосисочной — ${VERSION}. Скачать frontend можно по ссылке — https://nexus.praktikum-services.ru/repository/sausage-store-vorobyev-andrey-frontend/sausage-store/$VERSION/sausage-store-$VERSION.tar.gz .\"}'
    DEPLOY_CURL_COMMAND: 'curl -X POST -H "Content-type: application/json" --data "$DEPLOY_CURL_COMMAND_BODY"  https://hooks.slack.com/services/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'
  only:
    changes:
    - frontend/**/*
  script:
    - echo $DEPLOY_CURL_COMMAND
    - 'eval "$DEPLOY_CURL_COMMAND"'
  needs:
    - job: deploy-frontend

cache:
  key: frontend
  paths:
    - frontend/dist/frontend # для хранения фронта 